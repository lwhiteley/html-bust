// Generated by CoffeeScript 1.12.7
(function() {
  var Buster, _, async, cheerio, cheerioOpts, crypto, defaultOptions, escapeRegex, fs, path, remoteRegex, targetAttribute;

  fs = require('fs');

  path = require('path');

  crypto = require('crypto');

  cheerio = require('cheerio');

  async = require('async');

  _ = require('lodash');

  cheerioOpts = {
    xmlMode: false,
    lowerCaseTags: true,
    lowerCaseAttributeNames: true
  };

  remoteRegex = /^(?:http:|https:|\/\/|data:)/;

  targetAttribute = {
    img: 'src',
    script: 'src',
    link: 'href'
  };

  defaultOptions = {
    tagTypes: ['img', 'script', 'link'],
    urlHint: '?bust',
    mode: 'hash',
    fixedString: '',
    customFunction: function() {
      return '';
    },
    hashAlgorithm: 'sha1',
    hashLength: 8
  };

  escapeRegex = function(s) {
    return s.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
  };

  Buster = (function() {
    function Buster(opts1) {
      this.opts = opts1;
      _.defaults(this.opts, defaultOptions);
    }

    Buster.prototype.hasHint = function(path) {
      var hint;
      hint = this.opts.urlHint;
      return path.slice(path.length - hint.length) === hint;
    };

    Buster.prototype.removeHint = function(path) {
      var hintLength;
      hintLength = this.opts.urlHint.length;
      return path.slice(0, path.length - hintLength);
    };

    Buster.prototype.isEligiblePath = function(path) {
      return (!remoteRegex.test(path)) && ((this.opts.urlHint == null) || this.hasHint(path));
    };

    Buster.prototype.parseHtml = function(html) {
      return cheerio.load(html, cheerioOpts);
    };

    Buster.prototype.findAssets = function($) {
      return _.uniq(_.compact(_.flatten(_.map(this.opts.tagTypes, (function(_this) {
        return function(tag) {
          return _.map($(tag), function(el) {
            var attr, val;
            attr = targetAttribute[tag];
            if (attr != null) {
              val = $(el).attr(attr);
              if ((val != null) && _this.isEligiblePath(val)) {
                return val;
              }
            }
          });
        };
      })(this)))));
    };

    Buster.prototype.digestFile = function(path, done) {
      return fs.readFile(path, (function(_this) {
        return function(err, data) {
          var digest, hash;
          if (err != null) {
            return done(err);
          }
          hash = crypto.createHash(_this.opts.hashAlgorithm);
          hash.update(data);
          digest = hash.digest('hex').slice(0, _this.opts.hashLength);
          return done(null, digest);
        };
      })(this));
    };

    Buster.prototype.transformAsset = function(dir, asset, done) {
      var absolutePath, customString, fixedString, relativePath;
      relativePath = this.opts.urlHint != null ? this.removeHint(asset) : asset;
      absolutePath = path.join(dir, relativePath);
      switch (this.opts.mode) {
        case 'string':
          fixedString = this.opts.fixedString;
          return done(null, relativePath + "?" + fixedString);
        case 'custom':
          customString = _.isFunction(this.opts.customFunction) ? this.opts.customFunction() : '';
          customString = _.isString(customString) ? "?" + customString : '';
          return done(null, "" + relativePath + customString);
        case 'hash':
          return this.digestFile(absolutePath, (function(_this) {
            return function(err, hash) {
              if (err != null) {
                return done(err);
              }
              return done(null, relativePath + "?" + hash);
            };
          })(this));
      }
    };

    Buster.prototype.replaceAsset = function(dir, html, asset, done) {
      return this.transformAsset(dir, asset, (function(_this) {
        return function(err, bustedAsset) {
          var assetRegex, newHtml;
          if (err != null) {
            return done(err);
          }
          assetRegex = new RegExp(escapeRegex(asset), 'g');
          newHtml = html.replace(assetRegex, bustedAsset);
          return done(null, newHtml);
        };
      })(this));
    };

    Buster.prototype.transformHtml = function(dir, html, done) {
      var assetList, fn;
      assetList = this.findAssets(this.parseHtml(html));
      fn = (function(_this) {
        return function(asset, done) {
          return _this.replaceAsset(dir, html, asset, function(err, newHtml) {
            html = newHtml;
            return done(err);
          });
        };
      })(this);
      return async.eachSeries(assetList, fn, function(err) {
        return done(err, html);
      });
    };

    Buster.prototype.bust = function(inPath, outPath, done) {
      var read, transform, write;
      read = (function(_this) {
        return function(done) {
          return fs.readFile(inPath, {
            encoding: 'utf8'
          }, done);
        };
      })(this);
      transform = (function(_this) {
        return function(html, done) {
          return _this.transformHtml(path.dirname(inPath), html, done);
        };
      })(this);
      write = (function(_this) {
        return function(str, done) {
          return fs.writeFile(outPath, str, done);
        };
      })(this);
      return async.waterfall([read, transform, write], done);
    };

    return Buster;

  })();

  module.exports = function(inPath, outPath, opts, done) {
    if (opts == null) {
      done = function() {};
      opts = {};
    }
    if (done == null) {
      done = opts;
      opts = {};
    }
    return new Buster(opts).bust(inPath, outPath, done);
  };

}).call(this);
